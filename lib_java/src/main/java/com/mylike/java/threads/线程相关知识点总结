Java中实现多线程有两种方法：继承Thread类、实现Runnable接口，在程序开发中只要是多线程，肯定永远以实现Runnable接口为主，
因为实现Runnable接口相比继承Thread类有如下优势：
1、可以避免由于Java的单继承特性而带来的局限；
2、增强程序的健壮性，代码能够被多个线程共享，代码与数据是独立的.
Runnable和Callable有什么不同：
1. 两者都是接口；（废话）
2. 两者都需要调用Thread.start()启动线程；
3. 两者最大的不同点是：实现Callable接口的任务线程能返回执行结果；而实现Runnable接口的任务线程不能返回结果；
4. Callable接口的call()方法允许抛出异常；而Runnable接口的run()方法的异常只能在内部消化，不能继续上抛；
5. Callable接口支持返回执行结果，此时需要调用FutureTask.get()方法实现，此方法会阻塞主线程直到获取‘将来’结果；当不调用此方法时，主线程不会阻塞！
wait() 和 sleep()方法有什么不同？
1. Thread类的方法：sleep(),yield()/Object的方法：wait()和notify()；
2. sleep方法没有释放锁，而wait方法释放了锁；
3. wait()和sleep()都可以通过interrupt()方法 打断线程的暂停状态 ，从而使线程立刻抛出InterruptedException；
4. wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用；
5. sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常。
线程池有什么好处？
线程池：预先启动一些线程，线程无限循环从任务队列中获取一个任务进行执行，直到线程池被关闭。如果某个线程因为执行某个任务发生异常而终止，
那么重新创建一个新的线程而已。如此反复。
1. 避免重复创建线程，减少在创建和 销毁线程时所花时间，及系统的整体开销
2. 避免系统创建大量线程而消耗系统资源
3. 用户提交的数据能够及时得到处理，响应速度快
4. 能够更好的监控和管理线程
线程池有哪些种类，各自的使用场景是什么？
newCachedThreadPool：
底层：返回ThreadPoolExecutor实例，corePoolSize为0；maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为60L；unit为TimeUnit.SECONDS；workQueue为SynchronousQueue(同步队列)
通俗：当有新任务到来，则插入到SynchronousQueue中，由于SynchronousQueue是同步队列，因此会在池中寻找可用线程来执行，若有可以线程则执行，若没有可用线程则创建一个线程来执行该任务；若池中线程空闲时间超过指定大小，则该线程会被销毁。
适用：执行很多短期异步的小程序或者负载较轻的服务器
newFixedThreadPool：
底层：返回ThreadPoolExecutor实例，接收参数为所设定线程数量nThread，corePoolSize为nThread，maximumPoolSize为nThread；keepAliveTime为0L(不限时)；unit为：TimeUnit.MILLISECONDS；WorkQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列
通俗：创建可容纳固定数量线程的池子，每隔线程的存活时间是无限的，当池子满了就不在添加线程了；如果池中的所有线程均在繁忙状态，对于新任务会进入阻塞队列中(无界的阻塞队列)
适用：执行长期的任务，性能好很多
newSingleThreadExecutor:
底层：FinalizableDelegatedExecutorService包装的ThreadPoolExecutor实例，corePoolSize为1；maximumPoolSize为1；keepAliveTime为0L；unit为：TimeUnit.MILLISECONDS；workQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列
通俗：创建只有一个线程的线程池，且线程的存活时间是无限的；当该线程正繁忙时，对于新任务会进入阻塞队列中(无界的阻塞队列)
适用：一个任务一个任务执行的场景
NewScheduledThreadPool:
底层：创建ScheduledThreadPoolExecutor实例，corePoolSize为传递来的参数，maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为0；unit为：TimeUnit.NANOSECONDS；workQueue为：new DelayedWorkQueue() 一个按超时时间升序排序的队列
通俗：创建一个固定大小的线程池，线程池内线程存活时间无限制，线程池可以支持定时及周期性任务执行，如果所有线程均处于繁忙状态，对于新任务会进入DelayedWorkQueue队列中，这是一种按照超时时间排序的队列结构
适用：周期性执行任务的场景
线程池有哪些重要的参数？
核心线程数/最大线程数/线程空闲时间/时间单位/阻塞队列大小：queueCapacity/任务拒绝处理器 ：rejectedExceptionHandler
不是线程安全的数据结构:
1.ArrayList：内部实现是一个数组，其封装了一些对数组的操作。数组是一段连续的内存空间，所以它添加删除元素有可能需要移动很多元素。
注意每次扩容都是新申请一大块连续的内存空间。
使用场景：
1）快速随机访问元素，比如不按顺序的，一会儿get(1),一会儿get(18)的。随机添加删除元素则不适合它。
2）你需要一个不同步的基于索引的数据访问时，请尽量使用ArrayList。ArrayList很快，也很容易使用。但是要记得要给定一个合适的初始大小，尽可能的减少更改数组的大小。
它对应的线程安全的结构为Vector。
2.LinkedList：内部实现是一个双向链表，每个元素都有标记前后两个元素的指针。这样它不需要连续的内存空间，添加删除元素时不需要移动其他元素，只需要改变前后元素的指针即可。每次添加新元素只申请该元素的一个小空间。
使用场景：
1）你的应用不会随机访问数据。因为如果你需要LinkedList中的第n个元素的时候，你需要从第一个元素顺序数到第n个数据，然后读取数据。
2）你的应用更多的插入和删除元素，更少的读取数据。因为插入和删除元素不涉及重排数据，所以它要比ArrayList要快。
它对应的线程安全的结构为ConcurrentLinkedQueue
3.HashMap：实现了Map接口，实现了将唯一键隐射到特定值上。允许一个NULL键和多个NULL值。非线程安全。
内部实现也是基于一个数组，但是数组每个元素都是一个链表。根据hashCode直接定位到数组的一个元素，然后code值一样的则放到它链表的next。
使用场景：这个大家太熟悉了，就是key-value键值对，不细说了。
它对应的线程安全的结构为Hashtable，但是它的同步机制是用synchronized的，性能比较低，我们应该使用ConcurrentHashMap。它引入了一个分段锁，把整个map分为多个小map，
每个小map共用同一把锁，而且它用的锁是ReentrantLock。详细了解原理：http://www.importnew.com/22007.html
4.LinkedHashMap：在HashMap的基础上另外加一个链表把元素排上序。
使用场景：在需要按访问顺序或者插入顺序排序的时候，可以用它。比如LRU算法。
它对应的线程安全的结构为ConcurrentLinkedHashMap.
5.TreeMap：有序的Map，它是按key排序，默认是自然顺序，也可以自定义比较器。它的排序是通过红黑树实现的。
使用场景：需要排序的map。
它对应的线程安全的结构为ConcurrentSkipListMap，它内部是用跳跃表实现的，实际上在并发环境下的排序这件事上，跳跃表比平衡树效率要高。
6.HashBasedTable：二维map，本质上用HashMap<R, HashMap<C, V>>实现。
使用场景：当你用多个键做索引的时候，比如(x,y)这样一个坐标作为key，就可以用它。
它对应的线程安全的结构暂时没有，我正打算实现出来。
7.TreeBasedTable：基于TreeMap<R, TreeMap<C, V>>的实现。
8.ArrayTable：是一个需要在构建的时候就需要定下行列的表格。这种表格由二维数组实现，这样可以在密集数据的表格的场合，提高时间和空间的效率。
9.HashTable是线程安全类；类似于HashMap，但是不允许NULL键和NULL值，比HashMap慢，因为它是同步的。HashTable是一个线程安全的类，
它使用synchronized来锁住整张Hash表来实现线程安全，即每次锁住整张表让线程独占。
通过对其方法函数进行synchronized修饰实现其特性，效率低下，目前已被jdk废弃，不再推荐使用。
10.在多线程环境下，我们常用ConcurrentHashMap在需要保证数据安全的场景中去替换HashMap；此外ConcurrentHashMap也有不错的性能表现.
ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。它使用了多个锁来控制对hash表的不同部分进行的修改。
ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，
每个段其实就是一个小的Hashtable，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。
11.CopyOnWriteArrayList类是一个线程安全的List接口的实现，在高并发的情况下，可以提供高性能的并发读取，并且保证读取的内容一定是正确的，
这对于读操作远远多于写操作的应用非常适合。
12.CopyOnWriteArraySet是对CopyOnWriteArrayList使用了装饰模式后的具体实现，可理解为线程安全的Set。
13.ConcurrentLinkedQueue是一个线程安全的非阻塞队列，基于链表实现。java并没有提供构造方法来指定队列的大小，因此它是无界的。
为了提高并发量，它通过使用更细的锁机制，使得在多线程环境中只对部分数据进行锁定，从而提高运行效率.应该算是在高并发环境中性能最好的队列,
在多线程的队列应用场景中，强烈推荐使用。
14.Vector中的操作是线程安全的，它是利用synchronized同步锁机制进行实现，其实现方式与HashTable类似。
15.StringBuffer与StringBuilder常用于字符串拼接；前者线程安全，后者不是线程安全的；在多线程环境中下，考虑数据安全使用前者，否则使用后者。
16.LinkedBlockingQueue是一个线程安全的阻塞队列，基于链表实现，一般用于生产者与消费者模型的开发中。采用锁机制来实现多线程同步，
提供了一个构造方法用来指定队列的大小，如果不指定大小，队列采用默认大小（Integer.MAX_VALUE，即整型最大值）。
多线程常见设计模式：Future模式，Master-Worker模式，生产者-消费者模型。
